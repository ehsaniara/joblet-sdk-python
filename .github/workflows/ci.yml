name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.8", "3.9", "3.10", "3.11", "3.12" ]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Check proto generation
        run: |
          python scripts/generate_proto.py --version v1.0.1
          # Verify generated files exist and are not empty
          test -s joblet/joblet_pb2.py
          test -s joblet/joblet_pb2_grpc.py
          test -s joblet/_proto_generation_info.py

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 joblet/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 joblet/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Format check with black
        run: |
          black --check joblet/ examples/ scripts/ --extend-exclude "joblet_pb2\.py|joblet_pb2_grpc\.py|joblet_pb2\.pyi|_proto_generation_info\.py"

      - name: Import sorting check with isort
        run: |
          isort --check-only joblet/ examples/ scripts/ --skip joblet_pb2.py --skip joblet_pb2_grpc.py --skip joblet_pb2.pyi --skip _proto_generation_info.py

      - name: Type checking with mypy
        run: |
          mypy joblet/ --ignore-missing-imports

      - name: Test with pytest
        run: |
          pytest tests/ -v --cov=joblet --cov-report=xml --cov-report=term-missing
        continue-on-error: true  # Tests might not exist yet

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Security scan with bandit
        run: |
          bandit -r joblet/ -f json -o bandit-report.json || true

      - name: Check for known vulnerabilities with safety
        run: |
          safety check --json --output safety-report.json || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  proto-version-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install grpcio-tools

      - name: Check proto version consistency
        run: |
          # Check if we're using the latest proto version
          python scripts/generate_proto.py --list-tags > available_tags.txt
          latest_tag=$(head -n 1 available_tags.txt | grep -o 'v[0-9]*\.[0-9]*\.[0-9]*' || echo "")
          
          if [ -n "$latest_tag" ]; then
            current_tag=$(python -c "
          try:
              from joblet._proto_generation_info import PROTO_TAG
              print(PROTO_TAG or 'None')
          except:
              print('None')
          ")
          
            echo "Current proto version: $current_tag"
            echo "Latest available version: $latest_tag"
          
            if [ "$current_tag" != "$latest_tag" ]; then
              echo "⚠️ Proto version is outdated. Consider updating to $latest_tag"
              echo "::warning::Proto version ($current_tag) is behind latest ($latest_tag)"
            else
              echo "✅ Proto version is up to date"
            fi
          fi

  build:
    needs: [ test, security-scan ]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Install project dependencies
        run: |
          pip install -e ".[dev]"

      - name: Generate proto files
        run: |
          python scripts/generate_proto.py --version v1.0.1

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  validate-examples:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Generate proto files
        run: |
          python scripts/generate_proto.py --version v1.0.1

      - name: Validate example scripts
        run: |
          # Check that example scripts have valid syntax
          for script in examples/*.py; do
            echo "Checking $script..."
            python -m py_compile "$script"
          done

      - name: Create test certificates for examples
        run: |
          mkdir -p certs
          # Create placeholder certificates for syntax checking
          echo "-----BEGIN CERTIFICATE-----" > certs/ca-cert.pem
          echo "# Test CA certificate" >> certs/ca-cert.pem
          echo "-----END CERTIFICATE-----" >> certs/ca-cert.pem
          
          echo "-----BEGIN CERTIFICATE-----" > certs/client-cert.pem
          echo "# Test client certificate" >> certs/client-cert.pem
          echo "-----END CERTIFICATE-----" >> certs/client-cert.pem
          
          echo "-----BEGIN PRIVATE KEY-----" > certs/client-key.pem
          echo "# Test private key" >> certs/client-key.pem
          echo "-----END PRIVATE KEY-----" >> certs/client-key.pem

      - name: Test example imports
        run: |
          # Test that examples can import successfully
          export JOBLET_CA_CERT_PATH="certs/ca-cert.pem"
          export JOBLET_CLIENT_CERT_PATH="certs/client-cert.pem"
          export JOBLET_CLIENT_KEY_PATH="certs/client-key.pem"
          
          for script in examples/*.py; do
            if [[ "$script" != *"mtls_configuration.py" ]]; then
              echo "Testing imports in $script..."
              python -c "
          import sys
          sys.path.insert(0, '.')
          exec(compile(open('$script').read(), '$script', 'exec'))
          " 2>/dev/null || echo "⚠️ $script has runtime dependencies"
            fi
          done